# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RTMA_Definitions', [dirname(__file__)])
        except ImportError:
            import _RTMA_Definitions
            return _RTMA_Definitions
        if fp is not None:
            try:
                _mod = imp.load_module('_RTMA_Definitions', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _RTMA_Definitions = swig_import_helper()
    del swig_import_helper
else:
    import _RTMA_Definitions
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


MAX_MODULES = _RTMA_Definitions.MAX_MODULES
DYN_MOD_ID_START = _RTMA_Definitions.DYN_MOD_ID_START
MAX_HOSTS = _RTMA_Definitions.MAX_HOSTS
MAX_MESSAGE_TYPES = _RTMA_Definitions.MAX_MESSAGE_TYPES
MIN_STREAM_TYPE = _RTMA_Definitions.MIN_STREAM_TYPE
MAX_TIMERS = _RTMA_Definitions.MAX_TIMERS
MAX_INTERNAL_TIMERS = _RTMA_Definitions.MAX_INTERNAL_TIMERS
MAX_RTMA_MSG_TYPE = _RTMA_Definitions.MAX_RTMA_MSG_TYPE
MAX_RTMA_MODULE_ID = _RTMA_Definitions.MAX_RTMA_MODULE_ID
class RTMA_MSG_HEADER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RTMA_MSG_HEADER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RTMA_MSG_HEADER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_type"] = _RTMA_Definitions.RTMA_MSG_HEADER_msg_type_set
    __swig_getmethods__["msg_type"] = _RTMA_Definitions.RTMA_MSG_HEADER_msg_type_get
    if _newclass:msg_type = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_msg_type_get, _RTMA_Definitions.RTMA_MSG_HEADER_msg_type_set)
    __swig_setmethods__["msg_count"] = _RTMA_Definitions.RTMA_MSG_HEADER_msg_count_set
    __swig_getmethods__["msg_count"] = _RTMA_Definitions.RTMA_MSG_HEADER_msg_count_get
    if _newclass:msg_count = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_msg_count_get, _RTMA_Definitions.RTMA_MSG_HEADER_msg_count_set)
    __swig_setmethods__["send_time"] = _RTMA_Definitions.RTMA_MSG_HEADER_send_time_set
    __swig_getmethods__["send_time"] = _RTMA_Definitions.RTMA_MSG_HEADER_send_time_get
    if _newclass:send_time = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_send_time_get, _RTMA_Definitions.RTMA_MSG_HEADER_send_time_set)
    __swig_setmethods__["recv_time"] = _RTMA_Definitions.RTMA_MSG_HEADER_recv_time_set
    __swig_getmethods__["recv_time"] = _RTMA_Definitions.RTMA_MSG_HEADER_recv_time_get
    if _newclass:recv_time = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_recv_time_get, _RTMA_Definitions.RTMA_MSG_HEADER_recv_time_set)
    __swig_setmethods__["src_host_id"] = _RTMA_Definitions.RTMA_MSG_HEADER_src_host_id_set
    __swig_getmethods__["src_host_id"] = _RTMA_Definitions.RTMA_MSG_HEADER_src_host_id_get
    if _newclass:src_host_id = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_src_host_id_get, _RTMA_Definitions.RTMA_MSG_HEADER_src_host_id_set)
    __swig_setmethods__["src_mod_id"] = _RTMA_Definitions.RTMA_MSG_HEADER_src_mod_id_set
    __swig_getmethods__["src_mod_id"] = _RTMA_Definitions.RTMA_MSG_HEADER_src_mod_id_get
    if _newclass:src_mod_id = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_src_mod_id_get, _RTMA_Definitions.RTMA_MSG_HEADER_src_mod_id_set)
    __swig_setmethods__["dest_host_id"] = _RTMA_Definitions.RTMA_MSG_HEADER_dest_host_id_set
    __swig_getmethods__["dest_host_id"] = _RTMA_Definitions.RTMA_MSG_HEADER_dest_host_id_get
    if _newclass:dest_host_id = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_dest_host_id_get, _RTMA_Definitions.RTMA_MSG_HEADER_dest_host_id_set)
    __swig_setmethods__["dest_mod_id"] = _RTMA_Definitions.RTMA_MSG_HEADER_dest_mod_id_set
    __swig_getmethods__["dest_mod_id"] = _RTMA_Definitions.RTMA_MSG_HEADER_dest_mod_id_get
    if _newclass:dest_mod_id = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_dest_mod_id_get, _RTMA_Definitions.RTMA_MSG_HEADER_dest_mod_id_set)
    __swig_setmethods__["num_data_bytes"] = _RTMA_Definitions.RTMA_MSG_HEADER_num_data_bytes_set
    __swig_getmethods__["num_data_bytes"] = _RTMA_Definitions.RTMA_MSG_HEADER_num_data_bytes_get
    if _newclass:num_data_bytes = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_num_data_bytes_get, _RTMA_Definitions.RTMA_MSG_HEADER_num_data_bytes_set)
    __swig_setmethods__["remaining_bytes"] = _RTMA_Definitions.RTMA_MSG_HEADER_remaining_bytes_set
    __swig_getmethods__["remaining_bytes"] = _RTMA_Definitions.RTMA_MSG_HEADER_remaining_bytes_get
    if _newclass:remaining_bytes = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_remaining_bytes_get, _RTMA_Definitions.RTMA_MSG_HEADER_remaining_bytes_set)
    __swig_setmethods__["is_dynamic"] = _RTMA_Definitions.RTMA_MSG_HEADER_is_dynamic_set
    __swig_getmethods__["is_dynamic"] = _RTMA_Definitions.RTMA_MSG_HEADER_is_dynamic_get
    if _newclass:is_dynamic = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_is_dynamic_get, _RTMA_Definitions.RTMA_MSG_HEADER_is_dynamic_set)
    __swig_setmethods__["reserved"] = _RTMA_Definitions.RTMA_MSG_HEADER_reserved_set
    __swig_getmethods__["reserved"] = _RTMA_Definitions.RTMA_MSG_HEADER_reserved_get
    if _newclass:reserved = _swig_property(_RTMA_Definitions.RTMA_MSG_HEADER_reserved_get, _RTMA_Definitions.RTMA_MSG_HEADER_reserved_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_RTMA_MSG_HEADER()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_RTMA_MSG_HEADER
    __del__ = lambda self : None;
RTMA_MSG_HEADER_swigregister = _RTMA_Definitions.RTMA_MSG_HEADER_swigregister
RTMA_MSG_HEADER_swigregister(RTMA_MSG_HEADER)

MAX_CONTIGUOUS_MESSAGE_DATA = _RTMA_Definitions.MAX_CONTIGUOUS_MESSAGE_DATA
class RTMA_MESSAGE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RTMA_MESSAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RTMA_MESSAGE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_type"] = _RTMA_Definitions.RTMA_MESSAGE_msg_type_set
    __swig_getmethods__["msg_type"] = _RTMA_Definitions.RTMA_MESSAGE_msg_type_get
    if _newclass:msg_type = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_msg_type_get, _RTMA_Definitions.RTMA_MESSAGE_msg_type_set)
    __swig_setmethods__["msg_count"] = _RTMA_Definitions.RTMA_MESSAGE_msg_count_set
    __swig_getmethods__["msg_count"] = _RTMA_Definitions.RTMA_MESSAGE_msg_count_get
    if _newclass:msg_count = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_msg_count_get, _RTMA_Definitions.RTMA_MESSAGE_msg_count_set)
    __swig_setmethods__["send_time"] = _RTMA_Definitions.RTMA_MESSAGE_send_time_set
    __swig_getmethods__["send_time"] = _RTMA_Definitions.RTMA_MESSAGE_send_time_get
    if _newclass:send_time = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_send_time_get, _RTMA_Definitions.RTMA_MESSAGE_send_time_set)
    __swig_setmethods__["recv_time"] = _RTMA_Definitions.RTMA_MESSAGE_recv_time_set
    __swig_getmethods__["recv_time"] = _RTMA_Definitions.RTMA_MESSAGE_recv_time_get
    if _newclass:recv_time = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_recv_time_get, _RTMA_Definitions.RTMA_MESSAGE_recv_time_set)
    __swig_setmethods__["src_host_id"] = _RTMA_Definitions.RTMA_MESSAGE_src_host_id_set
    __swig_getmethods__["src_host_id"] = _RTMA_Definitions.RTMA_MESSAGE_src_host_id_get
    if _newclass:src_host_id = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_src_host_id_get, _RTMA_Definitions.RTMA_MESSAGE_src_host_id_set)
    __swig_setmethods__["src_mod_id"] = _RTMA_Definitions.RTMA_MESSAGE_src_mod_id_set
    __swig_getmethods__["src_mod_id"] = _RTMA_Definitions.RTMA_MESSAGE_src_mod_id_get
    if _newclass:src_mod_id = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_src_mod_id_get, _RTMA_Definitions.RTMA_MESSAGE_src_mod_id_set)
    __swig_setmethods__["dest_host_id"] = _RTMA_Definitions.RTMA_MESSAGE_dest_host_id_set
    __swig_getmethods__["dest_host_id"] = _RTMA_Definitions.RTMA_MESSAGE_dest_host_id_get
    if _newclass:dest_host_id = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_dest_host_id_get, _RTMA_Definitions.RTMA_MESSAGE_dest_host_id_set)
    __swig_setmethods__["dest_mod_id"] = _RTMA_Definitions.RTMA_MESSAGE_dest_mod_id_set
    __swig_getmethods__["dest_mod_id"] = _RTMA_Definitions.RTMA_MESSAGE_dest_mod_id_get
    if _newclass:dest_mod_id = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_dest_mod_id_get, _RTMA_Definitions.RTMA_MESSAGE_dest_mod_id_set)
    __swig_setmethods__["num_data_bytes"] = _RTMA_Definitions.RTMA_MESSAGE_num_data_bytes_set
    __swig_getmethods__["num_data_bytes"] = _RTMA_Definitions.RTMA_MESSAGE_num_data_bytes_get
    if _newclass:num_data_bytes = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_num_data_bytes_get, _RTMA_Definitions.RTMA_MESSAGE_num_data_bytes_set)
    __swig_setmethods__["remaining_bytes"] = _RTMA_Definitions.RTMA_MESSAGE_remaining_bytes_set
    __swig_getmethods__["remaining_bytes"] = _RTMA_Definitions.RTMA_MESSAGE_remaining_bytes_get
    if _newclass:remaining_bytes = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_remaining_bytes_get, _RTMA_Definitions.RTMA_MESSAGE_remaining_bytes_set)
    __swig_setmethods__["is_dynamic"] = _RTMA_Definitions.RTMA_MESSAGE_is_dynamic_set
    __swig_getmethods__["is_dynamic"] = _RTMA_Definitions.RTMA_MESSAGE_is_dynamic_get
    if _newclass:is_dynamic = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_is_dynamic_get, _RTMA_Definitions.RTMA_MESSAGE_is_dynamic_set)
    __swig_setmethods__["reserved"] = _RTMA_Definitions.RTMA_MESSAGE_reserved_set
    __swig_getmethods__["reserved"] = _RTMA_Definitions.RTMA_MESSAGE_reserved_get
    if _newclass:reserved = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_reserved_get, _RTMA_Definitions.RTMA_MESSAGE_reserved_set)
    __swig_setmethods__["data"] = _RTMA_Definitions.RTMA_MESSAGE_data_set
    __swig_getmethods__["data"] = _RTMA_Definitions.RTMA_MESSAGE_data_get
    if _newclass:data = _swig_property(_RTMA_Definitions.RTMA_MESSAGE_data_get, _RTMA_Definitions.RTMA_MESSAGE_data_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_RTMA_MESSAGE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_RTMA_MESSAGE
    __del__ = lambda self : None;
RTMA_MESSAGE_swigregister = _RTMA_Definitions.RTMA_MESSAGE_swigregister
RTMA_MESSAGE_swigregister(RTMA_MESSAGE)

MID_MESSAGE_MANAGER = _RTMA_Definitions.MID_MESSAGE_MANAGER
MID_COMMAND_MODULE = _RTMA_Definitions.MID_COMMAND_MODULE
MID_APPLICATION_MODULE = _RTMA_Definitions.MID_APPLICATION_MODULE
MID_NETWORK_RELAY = _RTMA_Definitions.MID_NETWORK_RELAY
MID_STATUS_MODULE = _RTMA_Definitions.MID_STATUS_MODULE
MID_QUICKLOGGER = _RTMA_Definitions.MID_QUICKLOGGER
HID_LOCAL_HOST = _RTMA_Definitions.HID_LOCAL_HOST
HID_ALL_HOSTS = _RTMA_Definitions.HID_ALL_HOSTS
ALL_MESSAGE_TYPES = _RTMA_Definitions.ALL_MESSAGE_TYPES
MT_EXIT = _RTMA_Definitions.MT_EXIT
MT_KILL = _RTMA_Definitions.MT_KILL
MT_ACKNOWLEDGE = _RTMA_Definitions.MT_ACKNOWLEDGE
MT_FAIL_SUBSCRIBE = _RTMA_Definitions.MT_FAIL_SUBSCRIBE
class MDF_FAIL_SUBSCRIBE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_FAIL_SUBSCRIBE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_FAIL_SUBSCRIBE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod_id"] = _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_mod_id_set
    __swig_getmethods__["mod_id"] = _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_mod_id_get
    if _newclass:mod_id = _swig_property(_RTMA_Definitions.MDF_FAIL_SUBSCRIBE_mod_id_get, _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_mod_id_set)
    __swig_setmethods__["reserved"] = _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_reserved_set
    __swig_getmethods__["reserved"] = _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_reserved_get
    if _newclass:reserved = _swig_property(_RTMA_Definitions.MDF_FAIL_SUBSCRIBE_reserved_get, _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_reserved_set)
    __swig_setmethods__["msg_type"] = _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_msg_type_set
    __swig_getmethods__["msg_type"] = _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_msg_type_get
    if _newclass:msg_type = _swig_property(_RTMA_Definitions.MDF_FAIL_SUBSCRIBE_msg_type_get, _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_msg_type_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_FAIL_SUBSCRIBE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_FAIL_SUBSCRIBE
    __del__ = lambda self : None;
MDF_FAIL_SUBSCRIBE_swigregister = _RTMA_Definitions.MDF_FAIL_SUBSCRIBE_swigregister
MDF_FAIL_SUBSCRIBE_swigregister(MDF_FAIL_SUBSCRIBE)

MT_FAILED_MESSAGE = _RTMA_Definitions.MT_FAILED_MESSAGE
class MDF_FAILED_MESSAGE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_FAILED_MESSAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_FAILED_MESSAGE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dest_mod_id"] = _RTMA_Definitions.MDF_FAILED_MESSAGE_dest_mod_id_set
    __swig_getmethods__["dest_mod_id"] = _RTMA_Definitions.MDF_FAILED_MESSAGE_dest_mod_id_get
    if _newclass:dest_mod_id = _swig_property(_RTMA_Definitions.MDF_FAILED_MESSAGE_dest_mod_id_get, _RTMA_Definitions.MDF_FAILED_MESSAGE_dest_mod_id_set)
    __swig_setmethods__["reserved"] = _RTMA_Definitions.MDF_FAILED_MESSAGE_reserved_set
    __swig_getmethods__["reserved"] = _RTMA_Definitions.MDF_FAILED_MESSAGE_reserved_get
    if _newclass:reserved = _swig_property(_RTMA_Definitions.MDF_FAILED_MESSAGE_reserved_get, _RTMA_Definitions.MDF_FAILED_MESSAGE_reserved_set)
    __swig_setmethods__["time_of_failure"] = _RTMA_Definitions.MDF_FAILED_MESSAGE_time_of_failure_set
    __swig_getmethods__["time_of_failure"] = _RTMA_Definitions.MDF_FAILED_MESSAGE_time_of_failure_get
    if _newclass:time_of_failure = _swig_property(_RTMA_Definitions.MDF_FAILED_MESSAGE_time_of_failure_get, _RTMA_Definitions.MDF_FAILED_MESSAGE_time_of_failure_set)
    __swig_setmethods__["msg_header"] = _RTMA_Definitions.MDF_FAILED_MESSAGE_msg_header_set
    __swig_getmethods__["msg_header"] = _RTMA_Definitions.MDF_FAILED_MESSAGE_msg_header_get
    if _newclass:msg_header = _swig_property(_RTMA_Definitions.MDF_FAILED_MESSAGE_msg_header_get, _RTMA_Definitions.MDF_FAILED_MESSAGE_msg_header_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_FAILED_MESSAGE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_FAILED_MESSAGE
    __del__ = lambda self : None;
MDF_FAILED_MESSAGE_swigregister = _RTMA_Definitions.MDF_FAILED_MESSAGE_swigregister
MDF_FAILED_MESSAGE_swigregister(MDF_FAILED_MESSAGE)

MT_MM_ERROR = _RTMA_Definitions.MT_MM_ERROR
MT_MM_INFO = _RTMA_Definitions.MT_MM_INFO
MT_CONNECT = _RTMA_Definitions.MT_CONNECT
class MDF_CONNECT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_CONNECT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_CONNECT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["logger_status"] = _RTMA_Definitions.MDF_CONNECT_logger_status_set
    __swig_getmethods__["logger_status"] = _RTMA_Definitions.MDF_CONNECT_logger_status_get
    if _newclass:logger_status = _swig_property(_RTMA_Definitions.MDF_CONNECT_logger_status_get, _RTMA_Definitions.MDF_CONNECT_logger_status_set)
    __swig_setmethods__["daemon_status"] = _RTMA_Definitions.MDF_CONNECT_daemon_status_set
    __swig_getmethods__["daemon_status"] = _RTMA_Definitions.MDF_CONNECT_daemon_status_get
    if _newclass:daemon_status = _swig_property(_RTMA_Definitions.MDF_CONNECT_daemon_status_get, _RTMA_Definitions.MDF_CONNECT_daemon_status_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_CONNECT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_CONNECT
    __del__ = lambda self : None;
MDF_CONNECT_swigregister = _RTMA_Definitions.MDF_CONNECT_swigregister
MDF_CONNECT_swigregister(MDF_CONNECT)

MT_DISCONNECT = _RTMA_Definitions.MT_DISCONNECT
MT_SUBSCRIBE = _RTMA_Definitions.MT_SUBSCRIBE
MT_UNSUBSCRIBE = _RTMA_Definitions.MT_UNSUBSCRIBE
MT_PAUSE_SUBSCRIPTION = _RTMA_Definitions.MT_PAUSE_SUBSCRIPTION
MT_RESUME_SUBSCRIPTION = _RTMA_Definitions.MT_RESUME_SUBSCRIPTION
MT_SHUTDOWN_RTMA = _RTMA_Definitions.MT_SHUTDOWN_RTMA
MT_SHUTDOWN_APP = _RTMA_Definitions.MT_SHUTDOWN_APP
MT_FORCE_DISCONNECT = _RTMA_Definitions.MT_FORCE_DISCONNECT
class MDF_FORCE_DISCONNECT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_FORCE_DISCONNECT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_FORCE_DISCONNECT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod_id"] = _RTMA_Definitions.MDF_FORCE_DISCONNECT_mod_id_set
    __swig_getmethods__["mod_id"] = _RTMA_Definitions.MDF_FORCE_DISCONNECT_mod_id_get
    if _newclass:mod_id = _swig_property(_RTMA_Definitions.MDF_FORCE_DISCONNECT_mod_id_get, _RTMA_Definitions.MDF_FORCE_DISCONNECT_mod_id_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_FORCE_DISCONNECT()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_FORCE_DISCONNECT
    __del__ = lambda self : None;
MDF_FORCE_DISCONNECT_swigregister = _RTMA_Definitions.MDF_FORCE_DISCONNECT_swigregister
MDF_FORCE_DISCONNECT_swigregister(MDF_FORCE_DISCONNECT)

MT_CORE_MODULE_REINIT_ACK = _RTMA_Definitions.MT_CORE_MODULE_REINIT_ACK
MT_MODULE_READY = _RTMA_Definitions.MT_MODULE_READY
class MDF_MODULE_READY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_MODULE_READY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_MODULE_READY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pid"] = _RTMA_Definitions.MDF_MODULE_READY_pid_set
    __swig_getmethods__["pid"] = _RTMA_Definitions.MDF_MODULE_READY_pid_get
    if _newclass:pid = _swig_property(_RTMA_Definitions.MDF_MODULE_READY_pid_get, _RTMA_Definitions.MDF_MODULE_READY_pid_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_MODULE_READY()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_MODULE_READY
    __del__ = lambda self : None;
MDF_MODULE_READY_swigregister = _RTMA_Definitions.MDF_MODULE_READY_swigregister
MDF_MODULE_READY_swigregister(MDF_MODULE_READY)

MT_DYNAMIC_DD_READ_ERR = _RTMA_Definitions.MT_DYNAMIC_DD_READ_ERR
MT_DEBUG_TEXT = _RTMA_Definitions.MT_DEBUG_TEXT
MT_AM_EXIT = _RTMA_Definitions.MT_AM_EXIT
MT_START_APP = _RTMA_Definitions.MT_START_APP
MT_STOP_APP = _RTMA_Definitions.MT_STOP_APP
MT_RESTART_APP = _RTMA_Definitions.MT_RESTART_APP
MT_KILL_APP = _RTMA_Definitions.MT_KILL_APP
MT_AM_RE_READ_CONFIG_FILE = _RTMA_Definitions.MT_AM_RE_READ_CONFIG_FILE
MT_AM_GET_APP_NAME = _RTMA_Definitions.MT_AM_GET_APP_NAME
MT_SLAVE_START_APP = _RTMA_Definitions.MT_SLAVE_START_APP
MT_SLAVE_START_APP_ACK = _RTMA_Definitions.MT_SLAVE_START_APP_ACK
class MDF_SLAVE_START_APP_ACK(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_SLAVE_START_APP_ACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_SLAVE_START_APP_ACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_remote_hosts"] = _RTMA_Definitions.MDF_SLAVE_START_APP_ACK_num_remote_hosts_set
    __swig_getmethods__["num_remote_hosts"] = _RTMA_Definitions.MDF_SLAVE_START_APP_ACK_num_remote_hosts_get
    if _newclass:num_remote_hosts = _swig_property(_RTMA_Definitions.MDF_SLAVE_START_APP_ACK_num_remote_hosts_get, _RTMA_Definitions.MDF_SLAVE_START_APP_ACK_num_remote_hosts_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_SLAVE_START_APP_ACK()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_SLAVE_START_APP_ACK
    __del__ = lambda self : None;
MDF_SLAVE_START_APP_ACK_swigregister = _RTMA_Definitions.MDF_SLAVE_START_APP_ACK_swigregister
MDF_SLAVE_START_APP_ACK_swigregister(MDF_SLAVE_START_APP_ACK)

MT_SLAVE_STOP_APP = _RTMA_Definitions.MT_SLAVE_STOP_APP
MT_SLAVE_KILL_APP = _RTMA_Definitions.MT_SLAVE_KILL_APP
MT_SLAVE_RESTART_APP = _RTMA_Definitions.MT_SLAVE_RESTART_APP
MT_AM_ERROR = _RTMA_Definitions.MT_AM_ERROR
MT_AM_ACKNOWLEDGE = _RTMA_Definitions.MT_AM_ACKNOWLEDGE
MT_FAIL_START_APP = _RTMA_Definitions.MT_FAIL_START_APP
MT_FAIL_STOP_APP = _RTMA_Definitions.MT_FAIL_STOP_APP
MT_FAIL_KILL_APP = _RTMA_Definitions.MT_FAIL_KILL_APP
MT_APP_START_COMPLETE = _RTMA_Definitions.MT_APP_START_COMPLETE
MT_APP_SHUTODWN_COMPLETE = _RTMA_Definitions.MT_APP_SHUTODWN_COMPLETE
MT_APP_RESTART_COMPLETE = _RTMA_Definitions.MT_APP_RESTART_COMPLETE
MT_APP_KILL_COMPLETE = _RTMA_Definitions.MT_APP_KILL_COMPLETE
MT_ALL_MODULES_READY = _RTMA_Definitions.MT_ALL_MODULES_READY
MT_CORE_MODULE_REINIT = _RTMA_Definitions.MT_CORE_MODULE_REINIT
MT_AM_CONFIG_FILE_DATA = _RTMA_Definitions.MT_AM_CONFIG_FILE_DATA
MT_AM_APP_NAME = _RTMA_Definitions.MT_AM_APP_NAME
MT_SLAVE_ALL_MODULES_READY = _RTMA_Definitions.MT_SLAVE_ALL_MODULES_READY
MT_SLAVE_FAIL_START_APP = _RTMA_Definitions.MT_SLAVE_FAIL_START_APP
MT_SLAVE_FAIL_STOP_APP = _RTMA_Definitions.MT_SLAVE_FAIL_STOP_APP
MT_SLAVE_FAIL_KILL_APP = _RTMA_Definitions.MT_SLAVE_FAIL_KILL_APP
MT_SLAVE_APP_SHUTODWN_COMPLETE = _RTMA_Definitions.MT_SLAVE_APP_SHUTODWN_COMPLETE
MT_SLAVE_APP_RESTART_COMPLETE = _RTMA_Definitions.MT_SLAVE_APP_RESTART_COMPLETE
MT_SLAVE_APP_KILL_COMPLETE = _RTMA_Definitions.MT_SLAVE_APP_KILL_COMPLETE
MT_SLAVE_AM_ERROR = _RTMA_Definitions.MT_SLAVE_AM_ERROR
MT_APP_ERROR = _RTMA_Definitions.MT_APP_ERROR
MT_SM_EXIT = _RTMA_Definitions.MT_SM_EXIT
MT_CLOCK_SYNC = _RTMA_Definitions.MT_CLOCK_SYNC
MT_TIMER_EXPIRED = _RTMA_Definitions.MT_TIMER_EXPIRED
class MDF_TIMER_EXPIRED(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_TIMER_EXPIRED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_TIMER_EXPIRED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timer_id"] = _RTMA_Definitions.MDF_TIMER_EXPIRED_timer_id_set
    __swig_getmethods__["timer_id"] = _RTMA_Definitions.MDF_TIMER_EXPIRED_timer_id_get
    if _newclass:timer_id = _swig_property(_RTMA_Definitions.MDF_TIMER_EXPIRED_timer_id_get, _RTMA_Definitions.MDF_TIMER_EXPIRED_timer_id_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_TIMER_EXPIRED()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_TIMER_EXPIRED
    __del__ = lambda self : None;
MDF_TIMER_EXPIRED_swigregister = _RTMA_Definitions.MDF_TIMER_EXPIRED_swigregister
MDF_TIMER_EXPIRED_swigregister(MDF_TIMER_EXPIRED)

MT_TIMED_OUT = _RTMA_Definitions.MT_TIMED_OUT
MT_SET_TIMER_FAILED = _RTMA_Definitions.MT_SET_TIMER_FAILED
class MDF_SET_TIMER_FAILED(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_SET_TIMER_FAILED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_SET_TIMER_FAILED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod_id"] = _RTMA_Definitions.MDF_SET_TIMER_FAILED_mod_id_set
    __swig_getmethods__["mod_id"] = _RTMA_Definitions.MDF_SET_TIMER_FAILED_mod_id_get
    if _newclass:mod_id = _swig_property(_RTMA_Definitions.MDF_SET_TIMER_FAILED_mod_id_get, _RTMA_Definitions.MDF_SET_TIMER_FAILED_mod_id_set)
    __swig_setmethods__["timer_id"] = _RTMA_Definitions.MDF_SET_TIMER_FAILED_timer_id_set
    __swig_getmethods__["timer_id"] = _RTMA_Definitions.MDF_SET_TIMER_FAILED_timer_id_get
    if _newclass:timer_id = _swig_property(_RTMA_Definitions.MDF_SET_TIMER_FAILED_timer_id_get, _RTMA_Definitions.MDF_SET_TIMER_FAILED_timer_id_set)
    __swig_setmethods__["snooze_time"] = _RTMA_Definitions.MDF_SET_TIMER_FAILED_snooze_time_set
    __swig_getmethods__["snooze_time"] = _RTMA_Definitions.MDF_SET_TIMER_FAILED_snooze_time_get
    if _newclass:snooze_time = _swig_property(_RTMA_Definitions.MDF_SET_TIMER_FAILED_snooze_time_get, _RTMA_Definitions.MDF_SET_TIMER_FAILED_snooze_time_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_SET_TIMER_FAILED()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_SET_TIMER_FAILED
    __del__ = lambda self : None;
MDF_SET_TIMER_FAILED_swigregister = _RTMA_Definitions.MDF_SET_TIMER_FAILED_swigregister
MDF_SET_TIMER_FAILED_swigregister(MDF_SET_TIMER_FAILED)

MT_TM_EXIT = _RTMA_Definitions.MT_TM_EXIT
MT_SET_TIMER = _RTMA_Definitions.MT_SET_TIMER
class MDF_SET_TIMER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_SET_TIMER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_SET_TIMER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timer_id"] = _RTMA_Definitions.MDF_SET_TIMER_timer_id_set
    __swig_getmethods__["timer_id"] = _RTMA_Definitions.MDF_SET_TIMER_timer_id_get
    if _newclass:timer_id = _swig_property(_RTMA_Definitions.MDF_SET_TIMER_timer_id_get, _RTMA_Definitions.MDF_SET_TIMER_timer_id_set)
    __swig_setmethods__["snooze_time"] = _RTMA_Definitions.MDF_SET_TIMER_snooze_time_set
    __swig_getmethods__["snooze_time"] = _RTMA_Definitions.MDF_SET_TIMER_snooze_time_get
    if _newclass:snooze_time = _swig_property(_RTMA_Definitions.MDF_SET_TIMER_snooze_time_get, _RTMA_Definitions.MDF_SET_TIMER_snooze_time_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_SET_TIMER()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_SET_TIMER
    __del__ = lambda self : None;
MDF_SET_TIMER_swigregister = _RTMA_Definitions.MDF_SET_TIMER_swigregister
MDF_SET_TIMER_swigregister(MDF_SET_TIMER)

MT_CANCEL_TIMER = _RTMA_Definitions.MT_CANCEL_TIMER
class MDF_CANCEL_TIMER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_CANCEL_TIMER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_CANCEL_TIMER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timer_id"] = _RTMA_Definitions.MDF_CANCEL_TIMER_timer_id_set
    __swig_getmethods__["timer_id"] = _RTMA_Definitions.MDF_CANCEL_TIMER_timer_id_get
    if _newclass:timer_id = _swig_property(_RTMA_Definitions.MDF_CANCEL_TIMER_timer_id_get, _RTMA_Definitions.MDF_CANCEL_TIMER_timer_id_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_CANCEL_TIMER()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_CANCEL_TIMER
    __del__ = lambda self : None;
MDF_CANCEL_TIMER_swigregister = _RTMA_Definitions.MDF_CANCEL_TIMER_swigregister
MDF_CANCEL_TIMER_swigregister(MDF_CANCEL_TIMER)

MT_LM_EXIT = _RTMA_Definitions.MT_LM_EXIT
MT_MM_READY = _RTMA_Definitions.MT_MM_READY
MT_LM_READY = _RTMA_Definitions.MT_LM_READY
MT_SAVE_MESSAGE_LOG = _RTMA_Definitions.MT_SAVE_MESSAGE_LOG
MAX_LOGGER_FILENAME_LENGTH = _RTMA_Definitions.MAX_LOGGER_FILENAME_LENGTH
class MDF_SAVE_MESSAGE_LOG(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_SAVE_MESSAGE_LOG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_SAVE_MESSAGE_LOG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pathname"] = _RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_pathname_set
    __swig_getmethods__["pathname"] = _RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_pathname_get
    if _newclass:pathname = _swig_property(_RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_pathname_get, _RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_pathname_set)
    __swig_setmethods__["pathname_length"] = _RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_pathname_length_set
    __swig_getmethods__["pathname_length"] = _RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_pathname_length_get
    if _newclass:pathname_length = _swig_property(_RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_pathname_length_get, _RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_pathname_length_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_SAVE_MESSAGE_LOG()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_SAVE_MESSAGE_LOG
    __del__ = lambda self : None;
MDF_SAVE_MESSAGE_LOG_swigregister = _RTMA_Definitions.MDF_SAVE_MESSAGE_LOG_swigregister
MDF_SAVE_MESSAGE_LOG_swigregister(MDF_SAVE_MESSAGE_LOG)

MT_MESSAGE_LOG_SAVED = _RTMA_Definitions.MT_MESSAGE_LOG_SAVED
MT_PAUSE_MESSAGE_LOGGING = _RTMA_Definitions.MT_PAUSE_MESSAGE_LOGGING
MT_RESUME_MESSAGE_LOGGING = _RTMA_Definitions.MT_RESUME_MESSAGE_LOGGING
MT_RESET_MESSAGE_LOG = _RTMA_Definitions.MT_RESET_MESSAGE_LOG
MT_DUMP_MESSAGE_LOG = _RTMA_Definitions.MT_DUMP_MESSAGE_LOG
MT_TIMING_MESSAGE = _RTMA_Definitions.MT_TIMING_MESSAGE
class MDF_TIMING_MESSAGE(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_TIMING_MESSAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_TIMING_MESSAGE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timing"] = _RTMA_Definitions.MDF_TIMING_MESSAGE_timing_set
    __swig_getmethods__["timing"] = _RTMA_Definitions.MDF_TIMING_MESSAGE_timing_get
    if _newclass:timing = _swig_property(_RTMA_Definitions.MDF_TIMING_MESSAGE_timing_get, _RTMA_Definitions.MDF_TIMING_MESSAGE_timing_set)
    __swig_setmethods__["ModulePID"] = _RTMA_Definitions.MDF_TIMING_MESSAGE_ModulePID_set
    __swig_getmethods__["ModulePID"] = _RTMA_Definitions.MDF_TIMING_MESSAGE_ModulePID_get
    if _newclass:ModulePID = _swig_property(_RTMA_Definitions.MDF_TIMING_MESSAGE_ModulePID_get, _RTMA_Definitions.MDF_TIMING_MESSAGE_ModulePID_set)
    __swig_setmethods__["send_time"] = _RTMA_Definitions.MDF_TIMING_MESSAGE_send_time_set
    __swig_getmethods__["send_time"] = _RTMA_Definitions.MDF_TIMING_MESSAGE_send_time_get
    if _newclass:send_time = _swig_property(_RTMA_Definitions.MDF_TIMING_MESSAGE_send_time_get, _RTMA_Definitions.MDF_TIMING_MESSAGE_send_time_set)
    def __init__(self): 
        this = _RTMA_Definitions.new_MDF_TIMING_MESSAGE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_MDF_TIMING_MESSAGE
    __del__ = lambda self : None;
MDF_TIMING_MESSAGE_swigregister = _RTMA_Definitions.MDF_TIMING_MESSAGE_swigregister
MDF_TIMING_MESSAGE_swigregister(MDF_TIMING_MESSAGE)

class DoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _RTMA_Definitions.new_DoubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_DoubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _RTMA_Definitions.DoubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _RTMA_Definitions.DoubleArray___setitem__(self, *args)
    def cast(self): return _RTMA_Definitions.DoubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _RTMA_Definitions.DoubleArray_frompointer
    if _newclass:frompointer = staticmethod(_RTMA_Definitions.DoubleArray_frompointer)
DoubleArray_swigregister = _RTMA_Definitions.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

def DoubleArray_frompointer(*args):
  return _RTMA_Definitions.DoubleArray_frompointer(*args)
DoubleArray_frompointer = _RTMA_Definitions.DoubleArray_frompointer

class UcharArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UcharArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UcharArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _RTMA_Definitions.new_UcharArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _RTMA_Definitions.delete_UcharArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _RTMA_Definitions.UcharArray___getitem__(self, *args)
    def __setitem__(self, *args): return _RTMA_Definitions.UcharArray___setitem__(self, *args)
    def cast(self): return _RTMA_Definitions.UcharArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _RTMA_Definitions.UcharArray_frompointer
    if _newclass:frompointer = staticmethod(_RTMA_Definitions.UcharArray_frompointer)
UcharArray_swigregister = _RTMA_Definitions.UcharArray_swigregister
UcharArray_swigregister(UcharArray)

def UcharArray_frompointer(*args):
  return _RTMA_Definitions.UcharArray_frompointer(*args)
UcharArray_frompointer = _RTMA_Definitions.UcharArray_frompointer

# This file is compatible with both classic and new-style classes.


