# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Python interface to the University of Pittsburgh Motor Control Lab's Real Time Messaging Architecture (RTMA)."""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _PyRTMA3
else:
    import _PyRTMA3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def void_ptr(n):
    r"""void_ptr(long long n) -> void *"""
    return _PyRTMA3.void_ptr(n)

from ctypes import memmove, addressof, sizeof

def copy_from_msg(data, cmsg):
#memmove(addressof(data), cmsg.data, sizeof(data))
	cmsg.GetData(void_ptr(addressof(data)))

def copy_to_msg(data, cmsg):
	cmsg.SetData(void_ptr(addressof(data)), sizeof(data))


DEFAULT_PIPE_SERVER_NAME_FOR_MODULES = _PyRTMA3.DEFAULT_PIPE_SERVER_NAME_FOR_MODULES

DEFAULT_PIPE_SERVER_NAME_FOR_MM = _PyRTMA3.DEFAULT_PIPE_SERVER_NAME_FOR_MM

class CMessage(object):
    r"""Proxy of C++ CMessage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    msg_type = property(_PyRTMA3.CMessage_msg_type_get, _PyRTMA3.CMessage_msg_type_set, doc=r"""msg_type : MSG_TYPE""")
    msg_count = property(_PyRTMA3.CMessage_msg_count_get, _PyRTMA3.CMessage_msg_count_set, doc=r"""msg_count : MSG_COUNT""")
    send_time = property(_PyRTMA3.CMessage_send_time_get, _PyRTMA3.CMessage_send_time_set, doc=r"""send_time : double""")
    recv_time = property(_PyRTMA3.CMessage_recv_time_get, _PyRTMA3.CMessage_recv_time_set, doc=r"""recv_time : double""")
    src_host_id = property(_PyRTMA3.CMessage_src_host_id_get, _PyRTMA3.CMessage_src_host_id_set, doc=r"""src_host_id : HOST_ID""")
    src_mod_id = property(_PyRTMA3.CMessage_src_mod_id_get, _PyRTMA3.CMessage_src_mod_id_set, doc=r"""src_mod_id : MODULE_ID""")
    dest_host_id = property(_PyRTMA3.CMessage_dest_host_id_get, _PyRTMA3.CMessage_dest_host_id_set, doc=r"""dest_host_id : HOST_ID""")
    dest_mod_id = property(_PyRTMA3.CMessage_dest_mod_id_get, _PyRTMA3.CMessage_dest_mod_id_set, doc=r"""dest_mod_id : MODULE_ID""")
    num_data_bytes = property(_PyRTMA3.CMessage_num_data_bytes_get, _PyRTMA3.CMessage_num_data_bytes_set, doc=r"""num_data_bytes : int""")
    remaining_bytes = property(_PyRTMA3.CMessage_remaining_bytes_get, _PyRTMA3.CMessage_remaining_bytes_set, doc=r"""remaining_bytes : int""")
    is_dynamic = property(_PyRTMA3.CMessage_is_dynamic_get, _PyRTMA3.CMessage_is_dynamic_set, doc=r"""is_dynamic : int""")
    reserved = property(_PyRTMA3.CMessage_reserved_get, _PyRTMA3.CMessage_reserved_set, doc=r"""reserved : int""")
    data = property(_PyRTMA3.CMessage_data_get, _PyRTMA3.CMessage_data_set, doc=r"""data : a(MAX_CONTIGUOUS_MESSAGE_DATA).char""")
    large_data = property(_PyRTMA3.CMessage_large_data_get, _PyRTMA3.CMessage_large_data_set, doc=r"""large_data : p.char""")

    def __init__(self, *args):
        r"""
        __init__(CMessage self) -> CMessage
        __init__(CMessage self, MSG_TYPE mt) -> CMessage
        __init__(CMessage self, MSG_TYPE mt, void * pData, int num_bytes) -> CMessage
        """
        _PyRTMA3.CMessage_swiginit(self, _PyRTMA3.new_CMessage(*args))
    __swig_destroy__ = _PyRTMA3.delete_CMessage

    def GetDataPointer(self):
        r"""GetDataPointer(CMessage self) -> void *"""
        return _PyRTMA3.CMessage_GetDataPointer(self)

    def GetData(self, pData):
        r"""GetData(CMessage self, void * pData) -> int"""
        return _PyRTMA3.CMessage_GetData(self, pData)

    def SetData(self, pData, num_bytes):
        r"""SetData(CMessage self, void * pData, int num_bytes) -> int"""
        return _PyRTMA3.CMessage_SetData(self, pData, num_bytes)

    def AllocateData(self, num_bytes):
        r"""AllocateData(CMessage self, int num_bytes) -> int"""
        return _PyRTMA3.CMessage_AllocateData(self, num_bytes)

    def Set(self, mt, pData=None, num_bytes=0):
        r"""Set(CMessage self, MSG_TYPE mt, void * pData=None, int num_bytes=0) -> int"""
        return _PyRTMA3.CMessage_Set(self, mt, pData, num_bytes)

    def Receive(self, *args):
        r"""
        Receive(CMessage self, UPipe * input_pipe) -> int
        Receive(CMessage self, UPipe * input_pipe, double timeout) -> int
        """
        return _PyRTMA3.CMessage_Receive(self, *args)

    def Send(self, *args):
        r"""
        Send(CMessage self, UPipe * output_pipe) -> int
        Send(CMessage self, UPipe * output_pipe, double timeout) -> int
        """
        return _PyRTMA3.CMessage_Send(self, *args)

    def IsDynamic(self):
        r"""IsDynamic(CMessage self) -> bool"""
        return _PyRTMA3.CMessage_IsDynamic(self)

    def GetHeader(self):
        r"""GetHeader(CMessage self) -> RTMA_MSG_HEADER"""
        return _PyRTMA3.CMessage_GetHeader(self)

# Register CMessage in _PyRTMA3:
_PyRTMA3.CMessage_swigregister(CMessage)

class RTMA_Module(object):
    r"""Proxy of C++ RTMA_Module class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RTMA_Module self) -> RTMA_Module
        __init__(RTMA_Module self, MODULE_ID ModuleID, HOST_ID HostID) -> RTMA_Module
        """
        _PyRTMA3.RTMA_Module_swiginit(self, _PyRTMA3.new_RTMA_Module(*args))
    __swig_destroy__ = _PyRTMA3.delete_RTMA_Module

    def Cleanup(self):
        r"""Cleanup(RTMA_Module self)"""
        return _PyRTMA3.RTMA_Module_Cleanup(self)

    def InitVariables(self, ModuleID, HostID):
        r"""InitVariables(RTMA_Module self, MODULE_ID ModuleID, HOST_ID HostID)"""
        return _PyRTMA3.RTMA_Module_InitVariables(self, ModuleID, HostID)

    def ConnectToMMM(self, *args):
        r"""
        ConnectToMMM(RTMA_Module self, int logger_status=0, int read_dd_file=0, int daemon_status=0) -> int
        ConnectToMMM(RTMA_Module self, char * server_name, int logger_status=0, int read_dd_file=0, int daemon_status=0) -> int
        """
        return _PyRTMA3.RTMA_Module_ConnectToMMM(self, *args)

    def DisconnectFromMMM(self):
        r"""DisconnectFromMMM(RTMA_Module self) -> int"""
        return _PyRTMA3.RTMA_Module_DisconnectFromMMM(self)

    def IsConnected(self):
        r"""IsConnected(RTMA_Module self) -> int"""
        return _PyRTMA3.RTMA_Module_IsConnected(self)

    def SendModuleReady(self):
        r"""SendModuleReady(RTMA_Module self) -> int"""
        return _PyRTMA3.RTMA_Module_SendModuleReady(self)

    def Subscribe(self, MessageType):
        r"""Subscribe(RTMA_Module self, MSG_TYPE MessageType) -> int"""
        return _PyRTMA3.RTMA_Module_Subscribe(self, MessageType)

    def Unsubscribe(self, MessageType):
        r"""Unsubscribe(RTMA_Module self, MSG_TYPE MessageType) -> int"""
        return _PyRTMA3.RTMA_Module_Unsubscribe(self, MessageType)

    def PauseSubscription(self, MessageType):
        r"""PauseSubscription(RTMA_Module self, MSG_TYPE MessageType) -> int"""
        return _PyRTMA3.RTMA_Module_PauseSubscription(self, MessageType)

    def ResumeSubscription(self, MessageType):
        r"""ResumeSubscription(RTMA_Module self, MSG_TYPE MessageType) -> int"""
        return _PyRTMA3.RTMA_Module_ResumeSubscription(self, MessageType)

    def SendMessage(self, M, dest_mod_id=0, dest_host_id=0):
        r"""SendMessage(RTMA_Module self, CMessage M, MODULE_ID dest_mod_id=0, HOST_ID dest_host_id=0) -> int"""
        return _PyRTMA3.RTMA_Module_SendMessage(self, M, dest_mod_id, dest_host_id)

    def SendMessageRTMA(self, M, dest_mod_id=0, dest_host_id=0):
        r"""SendMessageRTMA(RTMA_Module self, CMessage M, MODULE_ID dest_mod_id=0, HOST_ID dest_host_id=0) -> int"""
        return _PyRTMA3.RTMA_Module_SendMessageRTMA(self, M, dest_mod_id, dest_host_id)

    def SendSignal(self, MessageType, dest_mod_id=0, dest_host_id=0):
        r"""SendSignal(RTMA_Module self, MSG_TYPE MessageType, MODULE_ID dest_mod_id=0, HOST_ID dest_host_id=0) -> int"""
        return _PyRTMA3.RTMA_Module_SendSignal(self, MessageType, dest_mod_id, dest_host_id)

    def SendSelfSignal(self, MessageType):
        r"""SendSelfSignal(RTMA_Module self, MSG_TYPE MessageType) -> int"""
        return _PyRTMA3.RTMA_Module_SendSelfSignal(self, MessageType)

    def ReadMessage(self, M, timeout=-1):
        r"""ReadMessage(RTMA_Module self, CMessage M, double timeout=-1) -> int"""
        return _PyRTMA3.RTMA_Module_ReadMessage(self, M, timeout)

    def WaitForSignal(self, SigType, blocking=1):
        r"""WaitForSignal(RTMA_Module self, MSG_TYPE SigType, int blocking=1) -> int"""
        return _PyRTMA3.RTMA_Module_WaitForSignal(self, SigType, blocking)

    def WaitForMessage(self, M, MsgType=-1):
        r"""WaitForMessage(RTMA_Module self, CMessage M, MSG_TYPE MsgType=-1)"""
        return _PyRTMA3.RTMA_Module_WaitForMessage(self, M, MsgType)

    def SetTimer(self, time_ms):
        r"""SetTimer(RTMA_Module self, unsigned int time_ms) -> int"""
        return _PyRTMA3.RTMA_Module_SetTimer(self, time_ms)

    def CancelTimer(self, timer_id):
        r"""CancelTimer(RTMA_Module self, int timer_id) -> int"""
        return _PyRTMA3.RTMA_Module_CancelTimer(self, timer_id)

    def SelfNotifyExpiredTimer(self, timer_id):
        r"""SelfNotifyExpiredTimer(RTMA_Module self, int timer_id) -> int"""
        return _PyRTMA3.RTMA_Module_SelfNotifyExpiredTimer(self, timer_id)

    def UpTime(self):
        r"""UpTime(RTMA_Module self) -> double"""
        return _PyRTMA3.RTMA_Module_UpTime(self)

    def GetPid(self):
        r"""GetPid(RTMA_Module self) -> int"""
        return _PyRTMA3.RTMA_Module_GetPid(self)

    def GetMessageCount(self):
        r"""GetMessageCount(RTMA_Module self) -> int"""
        return _PyRTMA3.RTMA_Module_GetMessageCount(self)

    def GetHostID(self):
        r"""GetHostID(RTMA_Module self) -> HOST_ID"""
        return _PyRTMA3.RTMA_Module_GetHostID(self)

    def GetModuleID(self):
        r"""GetModuleID(RTMA_Module self) -> MODULE_ID"""
        return _PyRTMA3.RTMA_Module_GetModuleID(self)

# Register RTMA_Module in _PyRTMA3:
_PyRTMA3.RTMA_Module_swigregister(RTMA_Module)


def SetMyPriority(priority_class):
    r"""SetMyPriority(int priority_class) -> int"""
    return _PyRTMA3.SetMyPriority(priority_class)

def GetMyPriority():
    r"""GetMyPriority() -> int"""
    return _PyRTMA3.GetMyPriority()
MAX_MODULES = _PyRTMA3.MAX_MODULES

DYN_MOD_ID_START = _PyRTMA3.DYN_MOD_ID_START

MAX_HOSTS = _PyRTMA3.MAX_HOSTS

MAX_MESSAGE_TYPES = _PyRTMA3.MAX_MESSAGE_TYPES

MIN_STREAM_TYPE = _PyRTMA3.MIN_STREAM_TYPE

MAX_TIMERS = _PyRTMA3.MAX_TIMERS

MAX_INTERNAL_TIMERS = _PyRTMA3.MAX_INTERNAL_TIMERS

MAX_RTMA_MSG_TYPE = _PyRTMA3.MAX_RTMA_MSG_TYPE

MAX_RTMA_MODULE_ID = _PyRTMA3.MAX_RTMA_MODULE_ID

class RTMA_MSG_HEADER(object):
    r"""Proxy of C++ RTMA_MSG_HEADER class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    msg_type = property(_PyRTMA3.RTMA_MSG_HEADER_msg_type_get, _PyRTMA3.RTMA_MSG_HEADER_msg_type_set, doc=r"""msg_type : MSG_TYPE""")
    msg_count = property(_PyRTMA3.RTMA_MSG_HEADER_msg_count_get, _PyRTMA3.RTMA_MSG_HEADER_msg_count_set, doc=r"""msg_count : MSG_COUNT""")
    send_time = property(_PyRTMA3.RTMA_MSG_HEADER_send_time_get, _PyRTMA3.RTMA_MSG_HEADER_send_time_set, doc=r"""send_time : double""")
    recv_time = property(_PyRTMA3.RTMA_MSG_HEADER_recv_time_get, _PyRTMA3.RTMA_MSG_HEADER_recv_time_set, doc=r"""recv_time : double""")
    src_host_id = property(_PyRTMA3.RTMA_MSG_HEADER_src_host_id_get, _PyRTMA3.RTMA_MSG_HEADER_src_host_id_set, doc=r"""src_host_id : HOST_ID""")
    src_mod_id = property(_PyRTMA3.RTMA_MSG_HEADER_src_mod_id_get, _PyRTMA3.RTMA_MSG_HEADER_src_mod_id_set, doc=r"""src_mod_id : MODULE_ID""")
    dest_host_id = property(_PyRTMA3.RTMA_MSG_HEADER_dest_host_id_get, _PyRTMA3.RTMA_MSG_HEADER_dest_host_id_set, doc=r"""dest_host_id : HOST_ID""")
    dest_mod_id = property(_PyRTMA3.RTMA_MSG_HEADER_dest_mod_id_get, _PyRTMA3.RTMA_MSG_HEADER_dest_mod_id_set, doc=r"""dest_mod_id : MODULE_ID""")
    num_data_bytes = property(_PyRTMA3.RTMA_MSG_HEADER_num_data_bytes_get, _PyRTMA3.RTMA_MSG_HEADER_num_data_bytes_set, doc=r"""num_data_bytes : int""")
    remaining_bytes = property(_PyRTMA3.RTMA_MSG_HEADER_remaining_bytes_get, _PyRTMA3.RTMA_MSG_HEADER_remaining_bytes_set, doc=r"""remaining_bytes : int""")
    is_dynamic = property(_PyRTMA3.RTMA_MSG_HEADER_is_dynamic_get, _PyRTMA3.RTMA_MSG_HEADER_is_dynamic_set, doc=r"""is_dynamic : int""")
    reserved = property(_PyRTMA3.RTMA_MSG_HEADER_reserved_get, _PyRTMA3.RTMA_MSG_HEADER_reserved_set, doc=r"""reserved : int""")

    def __init__(self):
        r"""__init__(RTMA_MSG_HEADER self) -> RTMA_MSG_HEADER"""
        _PyRTMA3.RTMA_MSG_HEADER_swiginit(self, _PyRTMA3.new_RTMA_MSG_HEADER())
    __swig_destroy__ = _PyRTMA3.delete_RTMA_MSG_HEADER

# Register RTMA_MSG_HEADER in _PyRTMA3:
_PyRTMA3.RTMA_MSG_HEADER_swigregister(RTMA_MSG_HEADER)

MAX_CONTIGUOUS_MESSAGE_DATA = _PyRTMA3.MAX_CONTIGUOUS_MESSAGE_DATA

class RTMA_MESSAGE(object):
    r"""Proxy of C++ RTMA_MESSAGE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    msg_type = property(_PyRTMA3.RTMA_MESSAGE_msg_type_get, _PyRTMA3.RTMA_MESSAGE_msg_type_set, doc=r"""msg_type : MSG_TYPE""")
    msg_count = property(_PyRTMA3.RTMA_MESSAGE_msg_count_get, _PyRTMA3.RTMA_MESSAGE_msg_count_set, doc=r"""msg_count : MSG_COUNT""")
    send_time = property(_PyRTMA3.RTMA_MESSAGE_send_time_get, _PyRTMA3.RTMA_MESSAGE_send_time_set, doc=r"""send_time : double""")
    recv_time = property(_PyRTMA3.RTMA_MESSAGE_recv_time_get, _PyRTMA3.RTMA_MESSAGE_recv_time_set, doc=r"""recv_time : double""")
    src_host_id = property(_PyRTMA3.RTMA_MESSAGE_src_host_id_get, _PyRTMA3.RTMA_MESSAGE_src_host_id_set, doc=r"""src_host_id : HOST_ID""")
    src_mod_id = property(_PyRTMA3.RTMA_MESSAGE_src_mod_id_get, _PyRTMA3.RTMA_MESSAGE_src_mod_id_set, doc=r"""src_mod_id : MODULE_ID""")
    dest_host_id = property(_PyRTMA3.RTMA_MESSAGE_dest_host_id_get, _PyRTMA3.RTMA_MESSAGE_dest_host_id_set, doc=r"""dest_host_id : HOST_ID""")
    dest_mod_id = property(_PyRTMA3.RTMA_MESSAGE_dest_mod_id_get, _PyRTMA3.RTMA_MESSAGE_dest_mod_id_set, doc=r"""dest_mod_id : MODULE_ID""")
    num_data_bytes = property(_PyRTMA3.RTMA_MESSAGE_num_data_bytes_get, _PyRTMA3.RTMA_MESSAGE_num_data_bytes_set, doc=r"""num_data_bytes : int""")
    remaining_bytes = property(_PyRTMA3.RTMA_MESSAGE_remaining_bytes_get, _PyRTMA3.RTMA_MESSAGE_remaining_bytes_set, doc=r"""remaining_bytes : int""")
    is_dynamic = property(_PyRTMA3.RTMA_MESSAGE_is_dynamic_get, _PyRTMA3.RTMA_MESSAGE_is_dynamic_set, doc=r"""is_dynamic : int""")
    reserved = property(_PyRTMA3.RTMA_MESSAGE_reserved_get, _PyRTMA3.RTMA_MESSAGE_reserved_set, doc=r"""reserved : int""")
    data = property(_PyRTMA3.RTMA_MESSAGE_data_get, _PyRTMA3.RTMA_MESSAGE_data_set, doc=r"""data : a(9000).char""")

    def __init__(self):
        r"""__init__(RTMA_MESSAGE self) -> RTMA_MESSAGE"""
        _PyRTMA3.RTMA_MESSAGE_swiginit(self, _PyRTMA3.new_RTMA_MESSAGE())
    __swig_destroy__ = _PyRTMA3.delete_RTMA_MESSAGE

# Register RTMA_MESSAGE in _PyRTMA3:
_PyRTMA3.RTMA_MESSAGE_swigregister(RTMA_MESSAGE)

MID_MESSAGE_MANAGER = _PyRTMA3.MID_MESSAGE_MANAGER

MID_COMMAND_MODULE = _PyRTMA3.MID_COMMAND_MODULE

MID_APPLICATION_MODULE = _PyRTMA3.MID_APPLICATION_MODULE

MID_NETWORK_RELAY = _PyRTMA3.MID_NETWORK_RELAY

MID_STATUS_MODULE = _PyRTMA3.MID_STATUS_MODULE

MID_QUICKLOGGER = _PyRTMA3.MID_QUICKLOGGER

HID_LOCAL_HOST = _PyRTMA3.HID_LOCAL_HOST

HID_ALL_HOSTS = _PyRTMA3.HID_ALL_HOSTS

ALL_MESSAGE_TYPES = _PyRTMA3.ALL_MESSAGE_TYPES

MT_EXIT = _PyRTMA3.MT_EXIT

MT_KILL = _PyRTMA3.MT_KILL

MT_ACKNOWLEDGE = _PyRTMA3.MT_ACKNOWLEDGE

MT_FAIL_SUBSCRIBE = _PyRTMA3.MT_FAIL_SUBSCRIBE

class MDF_FAIL_SUBSCRIBE(object):
    r"""Proxy of C++ MDF_FAIL_SUBSCRIBE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mod_id = property(_PyRTMA3.MDF_FAIL_SUBSCRIBE_mod_id_get, _PyRTMA3.MDF_FAIL_SUBSCRIBE_mod_id_set, doc=r"""mod_id : MODULE_ID""")
    reserved = property(_PyRTMA3.MDF_FAIL_SUBSCRIBE_reserved_get, _PyRTMA3.MDF_FAIL_SUBSCRIBE_reserved_set, doc=r"""reserved : short""")
    msg_type = property(_PyRTMA3.MDF_FAIL_SUBSCRIBE_msg_type_get, _PyRTMA3.MDF_FAIL_SUBSCRIBE_msg_type_set, doc=r"""msg_type : MSG_TYPE""")

    def __init__(self):
        r"""__init__(MDF_FAIL_SUBSCRIBE self) -> MDF_FAIL_SUBSCRIBE"""
        _PyRTMA3.MDF_FAIL_SUBSCRIBE_swiginit(self, _PyRTMA3.new_MDF_FAIL_SUBSCRIBE())
    __swig_destroy__ = _PyRTMA3.delete_MDF_FAIL_SUBSCRIBE

# Register MDF_FAIL_SUBSCRIBE in _PyRTMA3:
_PyRTMA3.MDF_FAIL_SUBSCRIBE_swigregister(MDF_FAIL_SUBSCRIBE)

MT_FAILED_MESSAGE = _PyRTMA3.MT_FAILED_MESSAGE

class MDF_FAILED_MESSAGE(object):
    r"""Proxy of C++ MDF_FAILED_MESSAGE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dest_mod_id = property(_PyRTMA3.MDF_FAILED_MESSAGE_dest_mod_id_get, _PyRTMA3.MDF_FAILED_MESSAGE_dest_mod_id_set, doc=r"""dest_mod_id : MODULE_ID""")
    reserved = property(_PyRTMA3.MDF_FAILED_MESSAGE_reserved_get, _PyRTMA3.MDF_FAILED_MESSAGE_reserved_set, doc=r"""reserved : a(3).short""")
    time_of_failure = property(_PyRTMA3.MDF_FAILED_MESSAGE_time_of_failure_get, _PyRTMA3.MDF_FAILED_MESSAGE_time_of_failure_set, doc=r"""time_of_failure : double""")
    msg_header = property(_PyRTMA3.MDF_FAILED_MESSAGE_msg_header_get, _PyRTMA3.MDF_FAILED_MESSAGE_msg_header_set, doc=r"""msg_header : RTMA_MSG_HEADER""")

    def __init__(self):
        r"""__init__(MDF_FAILED_MESSAGE self) -> MDF_FAILED_MESSAGE"""
        _PyRTMA3.MDF_FAILED_MESSAGE_swiginit(self, _PyRTMA3.new_MDF_FAILED_MESSAGE())
    __swig_destroy__ = _PyRTMA3.delete_MDF_FAILED_MESSAGE

# Register MDF_FAILED_MESSAGE in _PyRTMA3:
_PyRTMA3.MDF_FAILED_MESSAGE_swigregister(MDF_FAILED_MESSAGE)

MT_MM_ERROR = _PyRTMA3.MT_MM_ERROR

MT_MM_INFO = _PyRTMA3.MT_MM_INFO

MT_CONNECT = _PyRTMA3.MT_CONNECT

class MDF_CONNECT(object):
    r"""Proxy of C++ MDF_CONNECT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    logger_status = property(_PyRTMA3.MDF_CONNECT_logger_status_get, _PyRTMA3.MDF_CONNECT_logger_status_set, doc=r"""logger_status : short""")
    daemon_status = property(_PyRTMA3.MDF_CONNECT_daemon_status_get, _PyRTMA3.MDF_CONNECT_daemon_status_set, doc=r"""daemon_status : short""")

    def __init__(self):
        r"""__init__(MDF_CONNECT self) -> MDF_CONNECT"""
        _PyRTMA3.MDF_CONNECT_swiginit(self, _PyRTMA3.new_MDF_CONNECT())
    __swig_destroy__ = _PyRTMA3.delete_MDF_CONNECT

# Register MDF_CONNECT in _PyRTMA3:
_PyRTMA3.MDF_CONNECT_swigregister(MDF_CONNECT)

MT_DISCONNECT = _PyRTMA3.MT_DISCONNECT

MT_SUBSCRIBE = _PyRTMA3.MT_SUBSCRIBE

MT_UNSUBSCRIBE = _PyRTMA3.MT_UNSUBSCRIBE

MT_PAUSE_SUBSCRIPTION = _PyRTMA3.MT_PAUSE_SUBSCRIPTION

MT_RESUME_SUBSCRIPTION = _PyRTMA3.MT_RESUME_SUBSCRIPTION

MT_SHUTDOWN_RTMA = _PyRTMA3.MT_SHUTDOWN_RTMA

MT_SHUTDOWN_APP = _PyRTMA3.MT_SHUTDOWN_APP

MT_FORCE_DISCONNECT = _PyRTMA3.MT_FORCE_DISCONNECT

class MDF_FORCE_DISCONNECT(object):
    r"""Proxy of C++ MDF_FORCE_DISCONNECT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mod_id = property(_PyRTMA3.MDF_FORCE_DISCONNECT_mod_id_get, _PyRTMA3.MDF_FORCE_DISCONNECT_mod_id_set, doc=r"""mod_id : int""")

    def __init__(self):
        r"""__init__(MDF_FORCE_DISCONNECT self) -> MDF_FORCE_DISCONNECT"""
        _PyRTMA3.MDF_FORCE_DISCONNECT_swiginit(self, _PyRTMA3.new_MDF_FORCE_DISCONNECT())
    __swig_destroy__ = _PyRTMA3.delete_MDF_FORCE_DISCONNECT

# Register MDF_FORCE_DISCONNECT in _PyRTMA3:
_PyRTMA3.MDF_FORCE_DISCONNECT_swigregister(MDF_FORCE_DISCONNECT)

MT_CORE_MODULE_REINIT_ACK = _PyRTMA3.MT_CORE_MODULE_REINIT_ACK

MT_MODULE_READY = _PyRTMA3.MT_MODULE_READY

class MDF_MODULE_READY(object):
    r"""Proxy of C++ MDF_MODULE_READY class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pid = property(_PyRTMA3.MDF_MODULE_READY_pid_get, _PyRTMA3.MDF_MODULE_READY_pid_set, doc=r"""pid : int""")

    def __init__(self):
        r"""__init__(MDF_MODULE_READY self) -> MDF_MODULE_READY"""
        _PyRTMA3.MDF_MODULE_READY_swiginit(self, _PyRTMA3.new_MDF_MODULE_READY())
    __swig_destroy__ = _PyRTMA3.delete_MDF_MODULE_READY

# Register MDF_MODULE_READY in _PyRTMA3:
_PyRTMA3.MDF_MODULE_READY_swigregister(MDF_MODULE_READY)

MT_DYNAMIC_DD_READ_ERR = _PyRTMA3.MT_DYNAMIC_DD_READ_ERR

MT_DEBUG_TEXT = _PyRTMA3.MT_DEBUG_TEXT

MT_AM_EXIT = _PyRTMA3.MT_AM_EXIT

MT_START_APP = _PyRTMA3.MT_START_APP

MT_STOP_APP = _PyRTMA3.MT_STOP_APP

MT_RESTART_APP = _PyRTMA3.MT_RESTART_APP

MT_KILL_APP = _PyRTMA3.MT_KILL_APP

MT_AM_RE_READ_CONFIG_FILE = _PyRTMA3.MT_AM_RE_READ_CONFIG_FILE

MT_AM_GET_APP_NAME = _PyRTMA3.MT_AM_GET_APP_NAME

MT_SLAVE_START_APP = _PyRTMA3.MT_SLAVE_START_APP

MT_SLAVE_START_APP_ACK = _PyRTMA3.MT_SLAVE_START_APP_ACK

class MDF_SLAVE_START_APP_ACK(object):
    r"""Proxy of C++ MDF_SLAVE_START_APP_ACK class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    num_remote_hosts = property(_PyRTMA3.MDF_SLAVE_START_APP_ACK_num_remote_hosts_get, _PyRTMA3.MDF_SLAVE_START_APP_ACK_num_remote_hosts_set, doc=r"""num_remote_hosts : int""")

    def __init__(self):
        r"""__init__(MDF_SLAVE_START_APP_ACK self) -> MDF_SLAVE_START_APP_ACK"""
        _PyRTMA3.MDF_SLAVE_START_APP_ACK_swiginit(self, _PyRTMA3.new_MDF_SLAVE_START_APP_ACK())
    __swig_destroy__ = _PyRTMA3.delete_MDF_SLAVE_START_APP_ACK

# Register MDF_SLAVE_START_APP_ACK in _PyRTMA3:
_PyRTMA3.MDF_SLAVE_START_APP_ACK_swigregister(MDF_SLAVE_START_APP_ACK)

MT_SLAVE_STOP_APP = _PyRTMA3.MT_SLAVE_STOP_APP

MT_SLAVE_KILL_APP = _PyRTMA3.MT_SLAVE_KILL_APP

MT_SLAVE_RESTART_APP = _PyRTMA3.MT_SLAVE_RESTART_APP

MT_AM_ERROR = _PyRTMA3.MT_AM_ERROR

MT_AM_ACKNOWLEDGE = _PyRTMA3.MT_AM_ACKNOWLEDGE

MT_FAIL_START_APP = _PyRTMA3.MT_FAIL_START_APP

MT_FAIL_STOP_APP = _PyRTMA3.MT_FAIL_STOP_APP

MT_FAIL_KILL_APP = _PyRTMA3.MT_FAIL_KILL_APP

MT_APP_START_COMPLETE = _PyRTMA3.MT_APP_START_COMPLETE

MT_APP_SHUTODWN_COMPLETE = _PyRTMA3.MT_APP_SHUTODWN_COMPLETE

MT_APP_RESTART_COMPLETE = _PyRTMA3.MT_APP_RESTART_COMPLETE

MT_APP_KILL_COMPLETE = _PyRTMA3.MT_APP_KILL_COMPLETE

MT_ALL_MODULES_READY = _PyRTMA3.MT_ALL_MODULES_READY

MT_CORE_MODULE_REINIT = _PyRTMA3.MT_CORE_MODULE_REINIT

MT_AM_CONFIG_FILE_DATA = _PyRTMA3.MT_AM_CONFIG_FILE_DATA

MT_AM_APP_NAME = _PyRTMA3.MT_AM_APP_NAME

MT_SLAVE_ALL_MODULES_READY = _PyRTMA3.MT_SLAVE_ALL_MODULES_READY

MT_SLAVE_FAIL_START_APP = _PyRTMA3.MT_SLAVE_FAIL_START_APP

MT_SLAVE_FAIL_STOP_APP = _PyRTMA3.MT_SLAVE_FAIL_STOP_APP

MT_SLAVE_FAIL_KILL_APP = _PyRTMA3.MT_SLAVE_FAIL_KILL_APP

MT_SLAVE_APP_SHUTODWN_COMPLETE = _PyRTMA3.MT_SLAVE_APP_SHUTODWN_COMPLETE

MT_SLAVE_APP_RESTART_COMPLETE = _PyRTMA3.MT_SLAVE_APP_RESTART_COMPLETE

MT_SLAVE_APP_KILL_COMPLETE = _PyRTMA3.MT_SLAVE_APP_KILL_COMPLETE

MT_SLAVE_AM_ERROR = _PyRTMA3.MT_SLAVE_AM_ERROR

MT_APP_ERROR = _PyRTMA3.MT_APP_ERROR

MT_SM_EXIT = _PyRTMA3.MT_SM_EXIT

MT_CLOCK_SYNC = _PyRTMA3.MT_CLOCK_SYNC

MT_TIMER_EXPIRED = _PyRTMA3.MT_TIMER_EXPIRED

class MDF_TIMER_EXPIRED(object):
    r"""Proxy of C++ MDF_TIMER_EXPIRED class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    timer_id = property(_PyRTMA3.MDF_TIMER_EXPIRED_timer_id_get, _PyRTMA3.MDF_TIMER_EXPIRED_timer_id_set, doc=r"""timer_id : int""")

    def __init__(self):
        r"""__init__(MDF_TIMER_EXPIRED self) -> MDF_TIMER_EXPIRED"""
        _PyRTMA3.MDF_TIMER_EXPIRED_swiginit(self, _PyRTMA3.new_MDF_TIMER_EXPIRED())
    __swig_destroy__ = _PyRTMA3.delete_MDF_TIMER_EXPIRED

# Register MDF_TIMER_EXPIRED in _PyRTMA3:
_PyRTMA3.MDF_TIMER_EXPIRED_swigregister(MDF_TIMER_EXPIRED)

MT_TIMED_OUT = _PyRTMA3.MT_TIMED_OUT

MT_SET_TIMER_FAILED = _PyRTMA3.MT_SET_TIMER_FAILED

class MDF_SET_TIMER_FAILED(object):
    r"""Proxy of C++ MDF_SET_TIMER_FAILED class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mod_id = property(_PyRTMA3.MDF_SET_TIMER_FAILED_mod_id_get, _PyRTMA3.MDF_SET_TIMER_FAILED_mod_id_set, doc=r"""mod_id : MODULE_ID""")
    timer_id = property(_PyRTMA3.MDF_SET_TIMER_FAILED_timer_id_get, _PyRTMA3.MDF_SET_TIMER_FAILED_timer_id_set, doc=r"""timer_id : int""")
    snooze_time = property(_PyRTMA3.MDF_SET_TIMER_FAILED_snooze_time_get, _PyRTMA3.MDF_SET_TIMER_FAILED_snooze_time_set, doc=r"""snooze_time : int""")

    def __init__(self):
        r"""__init__(MDF_SET_TIMER_FAILED self) -> MDF_SET_TIMER_FAILED"""
        _PyRTMA3.MDF_SET_TIMER_FAILED_swiginit(self, _PyRTMA3.new_MDF_SET_TIMER_FAILED())
    __swig_destroy__ = _PyRTMA3.delete_MDF_SET_TIMER_FAILED

# Register MDF_SET_TIMER_FAILED in _PyRTMA3:
_PyRTMA3.MDF_SET_TIMER_FAILED_swigregister(MDF_SET_TIMER_FAILED)

MT_TM_EXIT = _PyRTMA3.MT_TM_EXIT

MT_SET_TIMER = _PyRTMA3.MT_SET_TIMER

class MDF_SET_TIMER(object):
    r"""Proxy of C++ MDF_SET_TIMER class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    timer_id = property(_PyRTMA3.MDF_SET_TIMER_timer_id_get, _PyRTMA3.MDF_SET_TIMER_timer_id_set, doc=r"""timer_id : int""")
    snooze_time = property(_PyRTMA3.MDF_SET_TIMER_snooze_time_get, _PyRTMA3.MDF_SET_TIMER_snooze_time_set, doc=r"""snooze_time : int""")

    def __init__(self):
        r"""__init__(MDF_SET_TIMER self) -> MDF_SET_TIMER"""
        _PyRTMA3.MDF_SET_TIMER_swiginit(self, _PyRTMA3.new_MDF_SET_TIMER())
    __swig_destroy__ = _PyRTMA3.delete_MDF_SET_TIMER

# Register MDF_SET_TIMER in _PyRTMA3:
_PyRTMA3.MDF_SET_TIMER_swigregister(MDF_SET_TIMER)

MT_CANCEL_TIMER = _PyRTMA3.MT_CANCEL_TIMER

class MDF_CANCEL_TIMER(object):
    r"""Proxy of C++ MDF_CANCEL_TIMER class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    timer_id = property(_PyRTMA3.MDF_CANCEL_TIMER_timer_id_get, _PyRTMA3.MDF_CANCEL_TIMER_timer_id_set, doc=r"""timer_id : int""")

    def __init__(self):
        r"""__init__(MDF_CANCEL_TIMER self) -> MDF_CANCEL_TIMER"""
        _PyRTMA3.MDF_CANCEL_TIMER_swiginit(self, _PyRTMA3.new_MDF_CANCEL_TIMER())
    __swig_destroy__ = _PyRTMA3.delete_MDF_CANCEL_TIMER

# Register MDF_CANCEL_TIMER in _PyRTMA3:
_PyRTMA3.MDF_CANCEL_TIMER_swigregister(MDF_CANCEL_TIMER)

MT_LM_EXIT = _PyRTMA3.MT_LM_EXIT

MT_MM_READY = _PyRTMA3.MT_MM_READY

MT_LM_READY = _PyRTMA3.MT_LM_READY

MT_SAVE_MESSAGE_LOG = _PyRTMA3.MT_SAVE_MESSAGE_LOG

MAX_LOGGER_FILENAME_LENGTH = _PyRTMA3.MAX_LOGGER_FILENAME_LENGTH

class MDF_SAVE_MESSAGE_LOG(object):
    r"""Proxy of C++ MDF_SAVE_MESSAGE_LOG class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pathname = property(_PyRTMA3.MDF_SAVE_MESSAGE_LOG_pathname_get, _PyRTMA3.MDF_SAVE_MESSAGE_LOG_pathname_set, doc=r"""pathname : a(256).char""")
    pathname_length = property(_PyRTMA3.MDF_SAVE_MESSAGE_LOG_pathname_length_get, _PyRTMA3.MDF_SAVE_MESSAGE_LOG_pathname_length_set, doc=r"""pathname_length : int""")

    def __init__(self):
        r"""__init__(MDF_SAVE_MESSAGE_LOG self) -> MDF_SAVE_MESSAGE_LOG"""
        _PyRTMA3.MDF_SAVE_MESSAGE_LOG_swiginit(self, _PyRTMA3.new_MDF_SAVE_MESSAGE_LOG())
    __swig_destroy__ = _PyRTMA3.delete_MDF_SAVE_MESSAGE_LOG

# Register MDF_SAVE_MESSAGE_LOG in _PyRTMA3:
_PyRTMA3.MDF_SAVE_MESSAGE_LOG_swigregister(MDF_SAVE_MESSAGE_LOG)

MT_MESSAGE_LOG_SAVED = _PyRTMA3.MT_MESSAGE_LOG_SAVED

MT_PAUSE_MESSAGE_LOGGING = _PyRTMA3.MT_PAUSE_MESSAGE_LOGGING

MT_RESUME_MESSAGE_LOGGING = _PyRTMA3.MT_RESUME_MESSAGE_LOGGING

MT_RESET_MESSAGE_LOG = _PyRTMA3.MT_RESET_MESSAGE_LOG

MT_DUMP_MESSAGE_LOG = _PyRTMA3.MT_DUMP_MESSAGE_LOG

MT_TIMING_MESSAGE = _PyRTMA3.MT_TIMING_MESSAGE

class MDF_TIMING_MESSAGE(object):
    r"""Proxy of C++ MDF_TIMING_MESSAGE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    timing = property(_PyRTMA3.MDF_TIMING_MESSAGE_timing_get, _PyRTMA3.MDF_TIMING_MESSAGE_timing_set, doc=r"""timing : a(10000).unsigned short""")
    ModulePID = property(_PyRTMA3.MDF_TIMING_MESSAGE_ModulePID_get, _PyRTMA3.MDF_TIMING_MESSAGE_ModulePID_set, doc=r"""ModulePID : a(200).int""")
    send_time = property(_PyRTMA3.MDF_TIMING_MESSAGE_send_time_get, _PyRTMA3.MDF_TIMING_MESSAGE_send_time_set, doc=r"""send_time : double""")

    def __init__(self):
        r"""__init__(MDF_TIMING_MESSAGE self) -> MDF_TIMING_MESSAGE"""
        _PyRTMA3.MDF_TIMING_MESSAGE_swiginit(self, _PyRTMA3.new_MDF_TIMING_MESSAGE())
    __swig_destroy__ = _PyRTMA3.delete_MDF_TIMING_MESSAGE

# Register MDF_TIMING_MESSAGE in _PyRTMA3:
_PyRTMA3.MDF_TIMING_MESSAGE_swigregister(MDF_TIMING_MESSAGE)



